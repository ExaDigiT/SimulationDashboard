/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SimulationsImport } from './routes/simulations'
import { Route as IndexImport } from './routes/index'
import { Route as SimulationsIndexImport } from './routes/simulations.index'
import { Route as SimulationsNewImport } from './routes/simulations.new'
import { Route as SimulationsSimulationIdImport } from './routes/simulations.$simulationId'
import { Route as SimulationsSimulationIdSummaryImport } from './routes/simulations.$simulationId.summary'
import { Route as SimulationsSimulationIdJobsImport } from './routes/simulations.$simulationId.jobs'
import { Route as SimulationsSimulationIdCoolingImport } from './routes/simulations.$simulationId.cooling'
import { Route as SimulationsSimulationIdConsoleImport } from './routes/simulations.$simulationId.console'
import { Route as SimulationsSimulationIdConfigurationImport } from './routes/simulations.$simulationId.configuration'
import { Route as SimulationsSimulationIdJobsJobIdImport } from './routes/simulations.$simulationId.jobs.$jobId'

// Create/Update Routes

const SimulationsRoute = SimulationsImport.update({
  path: '/simulations',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SimulationsIndexRoute = SimulationsIndexImport.update({
  path: '/',
  getParentRoute: () => SimulationsRoute,
} as any)

const SimulationsNewRoute = SimulationsNewImport.update({
  path: '/new',
  getParentRoute: () => SimulationsRoute,
} as any)

const SimulationsSimulationIdRoute = SimulationsSimulationIdImport.update({
  path: '/$simulationId',
  getParentRoute: () => SimulationsRoute,
} as any)

const SimulationsSimulationIdSummaryRoute =
  SimulationsSimulationIdSummaryImport.update({
    path: '/summary',
    getParentRoute: () => SimulationsSimulationIdRoute,
  } as any)

const SimulationsSimulationIdJobsRoute =
  SimulationsSimulationIdJobsImport.update({
    path: '/jobs',
    getParentRoute: () => SimulationsSimulationIdRoute,
  } as any)

const SimulationsSimulationIdCoolingRoute =
  SimulationsSimulationIdCoolingImport.update({
    path: '/cooling',
    getParentRoute: () => SimulationsSimulationIdRoute,
  } as any)

const SimulationsSimulationIdConsoleRoute =
  SimulationsSimulationIdConsoleImport.update({
    path: '/console',
    getParentRoute: () => SimulationsSimulationIdRoute,
  } as any)

const SimulationsSimulationIdConfigurationRoute =
  SimulationsSimulationIdConfigurationImport.update({
    path: '/configuration',
    getParentRoute: () => SimulationsSimulationIdRoute,
  } as any)

const SimulationsSimulationIdJobsJobIdRoute =
  SimulationsSimulationIdJobsJobIdImport.update({
    path: '/$jobId',
    getParentRoute: () => SimulationsSimulationIdJobsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/simulations': {
      preLoaderRoute: typeof SimulationsImport
      parentRoute: typeof rootRoute
    }
    '/simulations/$simulationId': {
      preLoaderRoute: typeof SimulationsSimulationIdImport
      parentRoute: typeof SimulationsImport
    }
    '/simulations/new': {
      preLoaderRoute: typeof SimulationsNewImport
      parentRoute: typeof SimulationsImport
    }
    '/simulations/': {
      preLoaderRoute: typeof SimulationsIndexImport
      parentRoute: typeof SimulationsImport
    }
    '/simulations/$simulationId/configuration': {
      preLoaderRoute: typeof SimulationsSimulationIdConfigurationImport
      parentRoute: typeof SimulationsSimulationIdImport
    }
    '/simulations/$simulationId/console': {
      preLoaderRoute: typeof SimulationsSimulationIdConsoleImport
      parentRoute: typeof SimulationsSimulationIdImport
    }
    '/simulations/$simulationId/cooling': {
      preLoaderRoute: typeof SimulationsSimulationIdCoolingImport
      parentRoute: typeof SimulationsSimulationIdImport
    }
    '/simulations/$simulationId/jobs': {
      preLoaderRoute: typeof SimulationsSimulationIdJobsImport
      parentRoute: typeof SimulationsSimulationIdImport
    }
    '/simulations/$simulationId/summary': {
      preLoaderRoute: typeof SimulationsSimulationIdSummaryImport
      parentRoute: typeof SimulationsSimulationIdImport
    }
    '/simulations/$simulationId/jobs/$jobId': {
      preLoaderRoute: typeof SimulationsSimulationIdJobsJobIdImport
      parentRoute: typeof SimulationsSimulationIdJobsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  SimulationsRoute.addChildren([
    SimulationsSimulationIdRoute.addChildren([
      SimulationsSimulationIdConfigurationRoute,
      SimulationsSimulationIdConsoleRoute,
      SimulationsSimulationIdCoolingRoute,
      SimulationsSimulationIdJobsRoute.addChildren([
        SimulationsSimulationIdJobsJobIdRoute,
      ]),
      SimulationsSimulationIdSummaryRoute,
    ]),
    SimulationsNewRoute,
    SimulationsIndexRoute,
  ]),
])

/* prettier-ignore-end */
